const assert = require('assert');
const mongoose = require('mongoose');
const mongooseLeanVirtuals = require('.');

const main = async () => {
  await mongoose.connect('mongodb://localhost/my_database');

  const childSchema = new mongoose.Schema({ firstName: String });
  childSchema.virtual('uri').get(function() {
    // This `uri` virtual is in a subdocument, so in order to get the
    // parent's `uri` you need to use this plugin's `parent()` function.

    const parent = this instanceof mongoose.Document
      ? this.parent()
      : mongooseLeanVirtuals.parent(this)
    ;
    return `${parent.uri}/child/${this._id}`;
  });

  const parentSchema = new mongoose.Schema({
    child: childSchema
  });
  parentSchema.virtual('uri').get(function() {
    return `/parent/${this._id}`;
  });
  
  parentSchema.plugin(mongooseLeanVirtuals);
  
  const Parent = mongoose.model('Parent', parentSchema);
  
  const doc = {
    child: { }
  };

  await Parent.create(doc);

  let result = await Parent
    .findOne()
    .lean({ virtuals: true });
  assert.equal(result.child.uri, `${result.uri}/child/${result.child.id}`);

  result = await Parent
    .findOne()
    .lean({ virtuals: true });
  assert.equal(result.child.uri, `${result.uri}/child/${result.child.id}`);
console.log('Done');
};

main().catch(err => {
  console.error(err);
  process.exit(-1);
});
